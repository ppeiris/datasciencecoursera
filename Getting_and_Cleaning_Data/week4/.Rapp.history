mtcars[mtcars$cyl > 6]
mtcars[mtcars$cyl > 1]
mtcars
library(datasets)#
data(mtcars)
mtcars
mtcars[mtcars$cyl = 6]
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mp
mtcars$mpg
mtcars$cyl
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
mtcars[,]
mtcars[,mtcars$hp > 1]
class(mtcars)
x <- matrix(mtcars)
x
mtca
mtcars
x
matrix(mtcars)
data.matrix(mtcars)
x <- data.matrix(mtcars)
x
class(x)
x$mpg
x[1,]
x[, 2]
x[,2]
x[,3]
x$hp
x[x[,2 == 6]]
x[x[,2 = 6]]
x[x[,2] == 6]
x
x[x[,2] == 6, ]
cyl6 <- x[x[,2] == 6, ]
class(cyl6)
cyl6
cyl6[,1]
cyl6[,4]
mean(cyl6[,4])
cyl6mean <- mean(cyl6[,4])
cyl6mean
cyl4 <- x[x[,2] == 4]
cyl4
cyl4 <- x[x[,2] == 4,]
cyl4
cyl4 <- x[x[,2] == 4,]
cyl4[,4]
cyl4hp <- cyl4[,4]
cyl4hp
mean(cyl4hp)
mean(cyl4hp) - cyl6mean
debug(ls)
ls
ls()
d
D
q
quit
exit
D
ls
ls()
debug(ls)
ls()
n
library(datasets)#
data(iris)
n
library(datasets)#
data(iris)
iris
class(iris)
head(isir)
head(iris)
n
nn
n
q
quit
exit
quit(0)
install.packages("RMySQL")
dbConnect()
dbConnect
?dbConnect
dbConnect
?dbConnect
install.packages("RMySQL")
dbConnect
install.packages("RMySQL")
data <- dbConnect(MySQL(), user ="gnome")
install.packages("RMySQL")
data <- dbConnect(MySQL(), user ="gnome")
library(RMySQL)
data <- dbConnect(MySQL(), user ="gnome")
data
list()
?list()
getwd()
?sapply
setwd("~/Dropbox/RIT_Academics_Prabath/NoiseAndRandomProcesses_Spring2011/Note/datasciencecoursera/Getting_and_Cleaning_Data/week4")
getwd()
?download.file
?download.file
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
?merge
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
library(quantmod)
library(quantmod)
library(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
source("q5.R")
